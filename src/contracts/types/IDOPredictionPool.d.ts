/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    Contract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IDOPredictionPoolInterface extends ethers.utils.Interface {
    functions: {
        "_getStakingReturn(address)": FunctionFragment;
        "_getTotalReward(address)": FunctionFragment;
        "claimWithStakingReward()": FunctionFragment;
        "declareEmergency()": FunctionFragment;
        "deletePool()": FunctionFragment;
        "dexDecimal()": FunctionFragment;
        "emergentWithdraw()": FunctionFragment;
        "endIDOPrediction()": FunctionFragment;
        "getStakers()": FunctionFragment;
        "idoAllocationFee()": FunctionFragment;
        "idoLockPeriods()": FunctionFragment;
        "idoRecipients(address)": FunctionFragment;
        "idoReleasePeriods()": FunctionFragment;
        "idoScheduleStartDate()": FunctionFragment;
        "idoScheduledTotalAmount(address)": FunctionFragment;
        "idoToken()": FunctionFragment;
        "idoTokenAmount()": FunctionFragment;
        "idoTokenBank()": FunctionFragment;
        "idoWithdrawInterval()": FunctionFragment;
        "idoWithdrawable(address)": FunctionFragment;
        "isAnEmergency()": FunctionFragment;
        "isDeleted()": FunctionFragment;
        "isIdoScheduleSettled()": FunctionFragment;
        "isLocked()": FunctionFragment;
        "isMatured()": FunctionFragment;
        "lockPool()": FunctionFragment;
        "lockTime()": FunctionFragment;
        "maturingPrice()": FunctionFragment;
        "maturityTime()": FunctionFragment;
        "minimumStakeAmount()": FunctionFragment;
        "owner()": FunctionFragment;
        "poolCreator()": FunctionFragment;
        "predictions(address)": FunctionFragment;
        "prizeAmount()": FunctionFragment;
        "purchaseIDOToken()": FunctionFragment;
        "purchasePrice()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "rewardManager()": FunctionFragment;
        "setIDODexDecimal(uint256)": FunctionFragment;
        "setIDOMaturityPrice(uint256)": FunctionFragment;
        "setIDOPurchasePrice(uint256)": FunctionFragment;
        "setIDOScheduleParameters(uint256,uint256,uint256,uint256)": FunctionFragment;
        "setWinnerStakers(address[25],uint256)": FunctionFragment;
        "sizeAllocation()": FunctionFragment;
        "sizeLimitRangeRate()": FunctionFragment;
        "sparksToken()": FunctionFragment;
        "stake(uint256,uint256,uint256)": FunctionFragment;
        "stakeApr()": FunctionFragment;
        "stakeTaxRate()": FunctionFragment;
        "stakers(uint256)": FunctionFragment;
        "startDate()": FunctionFragment;
        "totalStaked()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "usdPriceForIDO(uint256)": FunctionFragment;
        "usdToken()": FunctionFragment;
        "winnerStakers(uint256)": FunctionFragment;
        "withdrawStuckTokens(address,uint256,address)": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "_getStakingReturn", values: [string]): string;
    encodeFunctionData(functionFragment: "_getTotalReward", values: [string]): string;
    encodeFunctionData(functionFragment: "claimWithStakingReward", values?: undefined): string;
    encodeFunctionData(functionFragment: "declareEmergency", values?: undefined): string;
    encodeFunctionData(functionFragment: "deletePool", values?: undefined): string;
    encodeFunctionData(functionFragment: "dexDecimal", values?: undefined): string;
    encodeFunctionData(functionFragment: "emergentWithdraw", values?: undefined): string;
    encodeFunctionData(functionFragment: "endIDOPrediction", values?: undefined): string;
    encodeFunctionData(functionFragment: "getStakers", values?: undefined): string;
    encodeFunctionData(functionFragment: "idoAllocationFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "idoLockPeriods", values?: undefined): string;
    encodeFunctionData(functionFragment: "idoRecipients", values: [string]): string;
    encodeFunctionData(functionFragment: "idoReleasePeriods", values?: undefined): string;
    encodeFunctionData(functionFragment: "idoScheduleStartDate", values?: undefined): string;
    encodeFunctionData(functionFragment: "idoScheduledTotalAmount", values: [string]): string;
    encodeFunctionData(functionFragment: "idoToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "idoTokenAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "idoTokenBank", values?: undefined): string;
    encodeFunctionData(functionFragment: "idoWithdrawInterval", values?: undefined): string;
    encodeFunctionData(functionFragment: "idoWithdrawable", values: [string]): string;
    encodeFunctionData(functionFragment: "isAnEmergency", values?: undefined): string;
    encodeFunctionData(functionFragment: "isDeleted", values?: undefined): string;
    encodeFunctionData(functionFragment: "isIdoScheduleSettled", values?: undefined): string;
    encodeFunctionData(functionFragment: "isLocked", values?: undefined): string;
    encodeFunctionData(functionFragment: "isMatured", values?: undefined): string;
    encodeFunctionData(functionFragment: "lockPool", values?: undefined): string;
    encodeFunctionData(functionFragment: "lockTime", values?: undefined): string;
    encodeFunctionData(functionFragment: "maturingPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "maturityTime", values?: undefined): string;
    encodeFunctionData(functionFragment: "minimumStakeAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "poolCreator", values?: undefined): string;
    encodeFunctionData(functionFragment: "predictions", values: [string]): string;
    encodeFunctionData(functionFragment: "prizeAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "purchaseIDOToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "purchasePrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "setIDODexDecimal", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setIDOMaturityPrice", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setIDOPurchasePrice", values: [BigNumberish]): string;
    encodeFunctionData(
        functionFragment: "setIDOScheduleParameters",
        values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "setWinnerStakers",
        values: [
            [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            BigNumberish,
        ],
    ): string;
    encodeFunctionData(functionFragment: "sizeAllocation", values?: undefined): string;
    encodeFunctionData(functionFragment: "sizeLimitRangeRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "sparksToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "stake", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "stakeApr", values?: undefined): string;
    encodeFunctionData(functionFragment: "stakeTaxRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "stakers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalStaked", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "usdPriceForIDO", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "usdToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "winnerStakers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawStuckTokens", values: [string, BigNumberish, string]): string;

    decodeFunctionResult(functionFragment: "_getStakingReturn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_getTotalReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimWithStakingReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "declareEmergency", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deletePool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dexDecimal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emergentWithdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endIDOPrediction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoAllocationFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoLockPeriods", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoRecipients", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoReleasePeriods", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoScheduleStartDate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoScheduledTotalAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoTokenAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoTokenBank", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoWithdrawInterval", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoWithdrawable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAnEmergency", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDeleted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isIdoScheduleSettled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isMatured", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maturingPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maturityTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumStakeAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "poolCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "predictions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prizeAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "purchaseIDOToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "purchasePrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIDODexDecimal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIDOMaturityPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIDOPurchasePrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIDOScheduleParameters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWinnerStakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sizeAllocation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sizeLimitRangeRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sparksToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakeApr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakeTaxRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalStaked", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usdPriceForIDO", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usdToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "winnerStakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawStuckTokens", data: BytesLike): Result;

    events: {
        "IDOScheduleParametersSet(uint256,uint256,uint256,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PayUSDForIDOToken(address,uint256,uint256)": EventFragment;
        "PoolDeleted()": EventFragment;
        "PoolLocked()": EventFragment;
        "PoolMatured()": EventFragment;
        "PoolSorted()": EventFragment;
        "Stake(address,uint256,uint256,uint256)": EventFragment;
        "Unstake(address,uint256)": EventFragment;
        "WithdrawIDOToken(address,uint256)": EventFragment;
        "WithdrawPrize(address,uint256)": EventFragment;
        "WithdrawReturn(address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "IDOScheduleParametersSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PayUSDForIDOToken"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolDeleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolLocked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolMatured"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolSorted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrawIDOToken"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrawPrize"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrawReturn"): EventFragment;
}

export class IDOPredictionPool extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: IDOPredictionPoolInterface;

    functions: {
        _getStakingReturn(staker: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        "_getStakingReturn(address)"(staker: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        _getTotalReward(staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

        "_getTotalReward(address)"(staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

        claimWithStakingReward(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "claimWithStakingReward()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        declareEmergency(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "declareEmergency()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        deletePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "deletePool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        dexDecimal(overrides?: CallOverrides): Promise<[BigNumber]>;

        "dexDecimal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        emergentWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "emergentWithdraw()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        endIDOPrediction(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "endIDOPrediction()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        getStakers(overrides?: CallOverrides): Promise<[string[]]>;

        "getStakers()"(overrides?: CallOverrides): Promise<[string[]]>;

        idoAllocationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

        "idoAllocationFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        idoLockPeriods(overrides?: CallOverrides): Promise<[BigNumber]>;

        "idoLockPeriods()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        idoRecipients(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [boolean, BigNumber, BigNumber] & {
                isUSDPaid: boolean;
                totalAmount: BigNumber;
                amountWithdrawn: BigNumber;
            }
        >;

        "idoRecipients(address)"(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [boolean, BigNumber, BigNumber] & {
                isUSDPaid: boolean;
                totalAmount: BigNumber;
                amountWithdrawn: BigNumber;
            }
        >;

        idoReleasePeriods(overrides?: CallOverrides): Promise<[BigNumber]>;

        "idoReleasePeriods()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        idoScheduleStartDate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "idoScheduleStartDate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        idoScheduledTotalAmount(winner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        "idoScheduledTotalAmount(address)"(winner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        idoToken(overrides?: CallOverrides): Promise<[string]>;

        "idoToken()"(overrides?: CallOverrides): Promise<[string]>;

        idoTokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        "idoTokenAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        idoTokenBank(overrides?: CallOverrides): Promise<[string]>;

        "idoTokenBank()"(overrides?: CallOverrides): Promise<[string]>;

        idoWithdrawInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

        "idoWithdrawInterval()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        idoWithdrawable(winner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        "idoWithdrawable(address)"(winner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        isAnEmergency(overrides?: CallOverrides): Promise<[boolean]>;

        "isAnEmergency()"(overrides?: CallOverrides): Promise<[boolean]>;

        isDeleted(overrides?: CallOverrides): Promise<[boolean]>;

        "isDeleted()"(overrides?: CallOverrides): Promise<[boolean]>;

        isIdoScheduleSettled(overrides?: CallOverrides): Promise<[boolean]>;

        "isIdoScheduleSettled()"(overrides?: CallOverrides): Promise<[boolean]>;

        isLocked(overrides?: CallOverrides): Promise<[boolean]>;

        "isLocked()"(overrides?: CallOverrides): Promise<[boolean]>;

        isMatured(overrides?: CallOverrides): Promise<[boolean]>;

        "isMatured()"(overrides?: CallOverrides): Promise<[boolean]>;

        lockPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "lockPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        lockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

        "lockTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        maturingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

        "maturingPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        maturityTime(overrides?: CallOverrides): Promise<[BigNumber]>;

        "maturityTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        "owner()"(overrides?: CallOverrides): Promise<[string]>;

        poolCreator(overrides?: CallOverrides): Promise<[string]>;

        "poolCreator()"(overrides?: CallOverrides): Promise<[string]>;

        predictions(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                boolean,
                boolean,
            ] & {
                stakedBalance: BigNumber;
                stakedTime: BigNumber;
                amountWithdrawn: BigNumber;
                lastWithdrawalTime: BigNumber;
                pricePrediction1: BigNumber;
                pricePrediction2: BigNumber;
                difference: BigNumber;
                rank: BigNumber;
                didPrizeWithdrawn: boolean;
                didUnstake: boolean;
            }
        >;

        "predictions(address)"(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                boolean,
                boolean,
            ] & {
                stakedBalance: BigNumber;
                stakedTime: BigNumber;
                amountWithdrawn: BigNumber;
                lastWithdrawalTime: BigNumber;
                pricePrediction1: BigNumber;
                pricePrediction2: BigNumber;
                difference: BigNumber;
                rank: BigNumber;
                didPrizeWithdrawn: boolean;
                didUnstake: boolean;
            }
        >;

        prizeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        "prizeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        purchaseIDOToken(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "purchaseIDOToken()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        purchasePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

        "purchasePrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "renounceOwnership()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        rewardManager(overrides?: CallOverrides): Promise<[string]>;

        "rewardManager()"(overrides?: CallOverrides): Promise<[string]>;

        setIDODexDecimal(
            _dexDecimal: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setIDODexDecimal(uint256)"(
            _dexDecimal: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setIDOMaturityPrice(
            _maturingPrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setIDOMaturityPrice(uint256)"(
            _maturingPrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setIDOPurchasePrice(
            _purchasePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setIDOPurchasePrice(uint256)"(
            _purchasePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setIDOScheduleParameters(
            _idoScheduleStartDate: BigNumberish,
            _idoWithdrawInterval: BigNumberish,
            _idoReleasePeriods: BigNumberish,
            _idoLockPeriods: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setIDOScheduleParameters(uint256,uint256,uint256,uint256)"(
            _idoScheduleStartDate: BigNumberish,
            _idoWithdrawInterval: BigNumberish,
            _idoReleasePeriods: BigNumberish,
            _idoLockPeriods: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setWinnerStakers(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            _idoTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setWinnerStakers(address[25],uint256)"(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            _idoTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        sizeAllocation(overrides?: CallOverrides): Promise<[BigNumber]>;

        "sizeAllocation()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        sizeLimitRangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        sparksToken(overrides?: CallOverrides): Promise<[string]>;

        "sparksToken()"(overrides?: CallOverrides): Promise<[string]>;

        stake(
            _amount: BigNumberish,
            _pricePrediction1: BigNumberish,
            _pricePrediction2: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "stake(uint256,uint256,uint256)"(
            _amount: BigNumberish,
            _pricePrediction1: BigNumberish,
            _pricePrediction2: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        stakeApr(overrides?: CallOverrides): Promise<[BigNumber]>;

        "stakeApr()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        stakeTaxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "stakeTaxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

        "stakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

        startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "startDate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

        "totalStaked()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        usdPriceForIDO(_idoAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

        "usdPriceForIDO(uint256)"(_idoAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

        usdToken(overrides?: CallOverrides): Promise<[string]>;

        "usdToken()"(overrides?: CallOverrides): Promise<[string]>;

        winnerStakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

        "winnerStakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

        withdrawStuckTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "withdrawStuckTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    _getStakingReturn(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "_getStakingReturn(address)"(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    _getTotalReward(staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    "_getTotalReward(address)"(staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    claimWithStakingReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "claimWithStakingReward()"(
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    declareEmergency(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "declareEmergency()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    deletePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "deletePool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    dexDecimal(overrides?: CallOverrides): Promise<BigNumber>;

    "dexDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergentWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "emergentWithdraw()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    endIDOPrediction(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "endIDOPrediction()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getStakers(overrides?: CallOverrides): Promise<string[]>;

    "getStakers()"(overrides?: CallOverrides): Promise<string[]>;

    idoAllocationFee(overrides?: CallOverrides): Promise<BigNumber>;

    "idoAllocationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    idoLockPeriods(overrides?: CallOverrides): Promise<BigNumber>;

    "idoLockPeriods()"(overrides?: CallOverrides): Promise<BigNumber>;

    idoRecipients(
        arg0: string,
        overrides?: CallOverrides,
    ): Promise<
        [boolean, BigNumber, BigNumber] & {
            isUSDPaid: boolean;
            totalAmount: BigNumber;
            amountWithdrawn: BigNumber;
        }
    >;

    "idoRecipients(address)"(
        arg0: string,
        overrides?: CallOverrides,
    ): Promise<
        [boolean, BigNumber, BigNumber] & {
            isUSDPaid: boolean;
            totalAmount: BigNumber;
            amountWithdrawn: BigNumber;
        }
    >;

    idoReleasePeriods(overrides?: CallOverrides): Promise<BigNumber>;

    "idoReleasePeriods()"(overrides?: CallOverrides): Promise<BigNumber>;

    idoScheduleStartDate(overrides?: CallOverrides): Promise<BigNumber>;

    "idoScheduleStartDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    idoScheduledTotalAmount(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "idoScheduledTotalAmount(address)"(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

    idoToken(overrides?: CallOverrides): Promise<string>;

    "idoToken()"(overrides?: CallOverrides): Promise<string>;

    idoTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "idoTokenAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    idoTokenBank(overrides?: CallOverrides): Promise<string>;

    "idoTokenBank()"(overrides?: CallOverrides): Promise<string>;

    idoWithdrawInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "idoWithdrawInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    idoWithdrawable(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "idoWithdrawable(address)"(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAnEmergency(overrides?: CallOverrides): Promise<boolean>;

    "isAnEmergency()"(overrides?: CallOverrides): Promise<boolean>;

    isDeleted(overrides?: CallOverrides): Promise<boolean>;

    "isDeleted()"(overrides?: CallOverrides): Promise<boolean>;

    isIdoScheduleSettled(overrides?: CallOverrides): Promise<boolean>;

    "isIdoScheduleSettled()"(overrides?: CallOverrides): Promise<boolean>;

    isLocked(overrides?: CallOverrides): Promise<boolean>;

    "isLocked()"(overrides?: CallOverrides): Promise<boolean>;

    isMatured(overrides?: CallOverrides): Promise<boolean>;

    "isMatured()"(overrides?: CallOverrides): Promise<boolean>;

    lockPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "lockPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "maturingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturityTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maturityTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolCreator(overrides?: CallOverrides): Promise<string>;

    "poolCreator()"(overrides?: CallOverrides): Promise<string>;

    predictions(
        arg0: string,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
            stakedBalance: BigNumber;
            stakedTime: BigNumber;
            amountWithdrawn: BigNumber;
            lastWithdrawalTime: BigNumber;
            pricePrediction1: BigNumber;
            pricePrediction2: BigNumber;
            difference: BigNumber;
            rank: BigNumber;
            didPrizeWithdrawn: boolean;
            didUnstake: boolean;
        }
    >;

    "predictions(address)"(
        arg0: string,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
            stakedBalance: BigNumber;
            stakedTime: BigNumber;
            amountWithdrawn: BigNumber;
            lastWithdrawalTime: BigNumber;
            pricePrediction1: BigNumber;
            pricePrediction2: BigNumber;
            difference: BigNumber;
            rank: BigNumber;
            didPrizeWithdrawn: boolean;
            didUnstake: boolean;
        }
    >;

    prizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "prizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseIDOToken(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "purchaseIDOToken()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    purchasePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "purchasePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    "rewardManager()"(overrides?: CallOverrides): Promise<string>;

    setIDODexDecimal(
        _dexDecimal: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setIDODexDecimal(uint256)"(
        _dexDecimal: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setIDOMaturityPrice(
        _maturingPrice: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setIDOMaturityPrice(uint256)"(
        _maturingPrice: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setIDOPurchasePrice(
        _purchasePrice: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setIDOPurchasePrice(uint256)"(
        _purchasePrice: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setIDOScheduleParameters(
        _idoScheduleStartDate: BigNumberish,
        _idoWithdrawInterval: BigNumberish,
        _idoReleasePeriods: BigNumberish,
        _idoLockPeriods: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setIDOScheduleParameters(uint256,uint256,uint256,uint256)"(
        _idoScheduleStartDate: BigNumberish,
        _idoWithdrawInterval: BigNumberish,
        _idoReleasePeriods: BigNumberish,
        _idoLockPeriods: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWinnerStakers(
        addrArray: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
        ],
        _idoTokenAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setWinnerStakers(address[25],uint256)"(
        addrArray: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
        ],
        _idoTokenAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sizeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    "sizeAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

    sizeLimitRangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    sparksToken(overrides?: CallOverrides): Promise<string>;

    "sparksToken()"(overrides?: CallOverrides): Promise<string>;

    stake(
        _amount: BigNumberish,
        _pricePrediction1: BigNumberish,
        _pricePrediction2: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "stake(uint256,uint256,uint256)"(
        _amount: BigNumberish,
        _pricePrediction1: BigNumberish,
        _pricePrediction2: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakeApr(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "stakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    usdPriceForIDO(_idoAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "usdPriceForIDO(uint256)"(_idoAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    usdToken(overrides?: CallOverrides): Promise<string>;

    "usdToken()"(overrides?: CallOverrides): Promise<string>;

    winnerStakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "winnerStakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    withdrawStuckTokens(
        _stuckToken: string,
        amount: BigNumberish,
        receiver: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "withdrawStuckTokens(address,uint256,address)"(
        _stuckToken: string,
        amount: BigNumberish,
        receiver: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        _getStakingReturn(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        "_getStakingReturn(address)"(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        _getTotalReward(staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

        "_getTotalReward(address)"(staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

        claimWithStakingReward(overrides?: CallOverrides): Promise<void>;

        "claimWithStakingReward()"(overrides?: CallOverrides): Promise<void>;

        declareEmergency(overrides?: CallOverrides): Promise<void>;

        "declareEmergency()"(overrides?: CallOverrides): Promise<void>;

        deletePool(overrides?: CallOverrides): Promise<void>;

        "deletePool()"(overrides?: CallOverrides): Promise<void>;

        dexDecimal(overrides?: CallOverrides): Promise<BigNumber>;

        "dexDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

        emergentWithdraw(overrides?: CallOverrides): Promise<void>;

        "emergentWithdraw()"(overrides?: CallOverrides): Promise<void>;

        endIDOPrediction(overrides?: CallOverrides): Promise<void>;

        "endIDOPrediction()"(overrides?: CallOverrides): Promise<void>;

        getStakers(overrides?: CallOverrides): Promise<string[]>;

        "getStakers()"(overrides?: CallOverrides): Promise<string[]>;

        idoAllocationFee(overrides?: CallOverrides): Promise<BigNumber>;

        "idoAllocationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoLockPeriods(overrides?: CallOverrides): Promise<BigNumber>;

        "idoLockPeriods()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoRecipients(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [boolean, BigNumber, BigNumber] & {
                isUSDPaid: boolean;
                totalAmount: BigNumber;
                amountWithdrawn: BigNumber;
            }
        >;

        "idoRecipients(address)"(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [boolean, BigNumber, BigNumber] & {
                isUSDPaid: boolean;
                totalAmount: BigNumber;
                amountWithdrawn: BigNumber;
            }
        >;

        idoReleasePeriods(overrides?: CallOverrides): Promise<BigNumber>;

        "idoReleasePeriods()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoScheduleStartDate(overrides?: CallOverrides): Promise<BigNumber>;

        "idoScheduleStartDate()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoScheduledTotalAmount(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

        "idoScheduledTotalAmount(address)"(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

        idoToken(overrides?: CallOverrides): Promise<string>;

        "idoToken()"(overrides?: CallOverrides): Promise<string>;

        idoTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "idoTokenAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoTokenBank(overrides?: CallOverrides): Promise<string>;

        "idoTokenBank()"(overrides?: CallOverrides): Promise<string>;

        idoWithdrawInterval(overrides?: CallOverrides): Promise<BigNumber>;

        "idoWithdrawInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoWithdrawable(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

        "idoWithdrawable(address)"(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

        isAnEmergency(overrides?: CallOverrides): Promise<boolean>;

        "isAnEmergency()"(overrides?: CallOverrides): Promise<boolean>;

        isDeleted(overrides?: CallOverrides): Promise<boolean>;

        "isDeleted()"(overrides?: CallOverrides): Promise<boolean>;

        isIdoScheduleSettled(overrides?: CallOverrides): Promise<boolean>;

        "isIdoScheduleSettled()"(overrides?: CallOverrides): Promise<boolean>;

        isLocked(overrides?: CallOverrides): Promise<boolean>;

        "isLocked()"(overrides?: CallOverrides): Promise<boolean>;

        isMatured(overrides?: CallOverrides): Promise<boolean>;

        "isMatured()"(overrides?: CallOverrides): Promise<boolean>;

        lockPool(overrides?: CallOverrides): Promise<void>;

        "lockPool()"(overrides?: CallOverrides): Promise<void>;

        lockTime(overrides?: CallOverrides): Promise<BigNumber>;

        "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

        maturingPrice(overrides?: CallOverrides): Promise<BigNumber>;

        "maturingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

        maturityTime(overrides?: CallOverrides): Promise<BigNumber>;

        "maturityTime()"(overrides?: CallOverrides): Promise<BigNumber>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<string>;

        "owner()"(overrides?: CallOverrides): Promise<string>;

        poolCreator(overrides?: CallOverrides): Promise<string>;

        "poolCreator()"(overrides?: CallOverrides): Promise<string>;

        predictions(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                boolean,
                boolean,
            ] & {
                stakedBalance: BigNumber;
                stakedTime: BigNumber;
                amountWithdrawn: BigNumber;
                lastWithdrawalTime: BigNumber;
                pricePrediction1: BigNumber;
                pricePrediction2: BigNumber;
                difference: BigNumber;
                rank: BigNumber;
                didPrizeWithdrawn: boolean;
                didUnstake: boolean;
            }
        >;

        "predictions(address)"(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                boolean,
                boolean,
            ] & {
                stakedBalance: BigNumber;
                stakedTime: BigNumber;
                amountWithdrawn: BigNumber;
                lastWithdrawalTime: BigNumber;
                pricePrediction1: BigNumber;
                pricePrediction2: BigNumber;
                difference: BigNumber;
                rank: BigNumber;
                didPrizeWithdrawn: boolean;
                didUnstake: boolean;
            }
        >;

        prizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "prizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        purchaseIDOToken(overrides?: CallOverrides): Promise<void>;

        "purchaseIDOToken()"(overrides?: CallOverrides): Promise<void>;

        purchasePrice(overrides?: CallOverrides): Promise<BigNumber>;

        "purchasePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

        rewardManager(overrides?: CallOverrides): Promise<string>;

        "rewardManager()"(overrides?: CallOverrides): Promise<string>;

        setIDODexDecimal(_dexDecimal: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "setIDODexDecimal(uint256)"(_dexDecimal: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setIDOMaturityPrice(_maturingPrice: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "setIDOMaturityPrice(uint256)"(_maturingPrice: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setIDOPurchasePrice(_purchasePrice: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "setIDOPurchasePrice(uint256)"(_purchasePrice: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setIDOScheduleParameters(
            _idoScheduleStartDate: BigNumberish,
            _idoWithdrawInterval: BigNumberish,
            _idoReleasePeriods: BigNumberish,
            _idoLockPeriods: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        "setIDOScheduleParameters(uint256,uint256,uint256,uint256)"(
            _idoScheduleStartDate: BigNumberish,
            _idoWithdrawInterval: BigNumberish,
            _idoReleasePeriods: BigNumberish,
            _idoLockPeriods: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        setWinnerStakers(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            _idoTokenAmount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        "setWinnerStakers(address[25],uint256)"(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            _idoTokenAmount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        sizeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

        "sizeAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

        sizeLimitRangeRate(overrides?: CallOverrides): Promise<BigNumber>;

        "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        sparksToken(overrides?: CallOverrides): Promise<string>;

        "sparksToken()"(overrides?: CallOverrides): Promise<string>;

        stake(
            _amount: BigNumberish,
            _pricePrediction1: BigNumberish,
            _pricePrediction2: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        "stake(uint256,uint256,uint256)"(
            _amount: BigNumberish,
            _pricePrediction1: BigNumberish,
            _pricePrediction2: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        stakeApr(overrides?: CallOverrides): Promise<BigNumber>;

        "stakeApr()"(overrides?: CallOverrides): Promise<BigNumber>;

        stakeTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

        "stakeTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

        "stakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

        startDate(overrides?: CallOverrides): Promise<BigNumber>;

        "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

        totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

        "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

        "transferOwnership(address)"(newOwner: string, overrides?: CallOverrides): Promise<void>;

        usdPriceForIDO(_idoAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "usdPriceForIDO(uint256)"(_idoAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        usdToken(overrides?: CallOverrides): Promise<string>;

        "usdToken()"(overrides?: CallOverrides): Promise<string>;

        winnerStakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

        "winnerStakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

        withdrawStuckTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        "withdrawStuckTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: CallOverrides,
        ): Promise<void>;
    };

    filters: {
        IDOScheduleParametersSet(
            startDate: null,
            withdrawInterval: null,
            releasePeriods: null,
            lockPeriods: null,
        ): TypedEventFilter<
            [BigNumber, BigNumber, BigNumber, BigNumber],
            {
                startDate: BigNumber;
                withdrawInterval: BigNumber;
                releasePeriods: BigNumber;
                lockPeriods: BigNumber;
            }
        >;

        OwnershipTransferred(
            previousOwner: string | null,
            newOwner: string | null,
        ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

        PayUSDForIDOToken(
            user: string | null,
            usdAmount: null,
            idoTokenAmount: null,
        ): TypedEventFilter<
            [string, BigNumber, BigNumber],
            { user: string; usdAmount: BigNumber; idoTokenAmount: BigNumber }
        >;

        PoolDeleted(): TypedEventFilter<[], {}>;

        PoolLocked(): TypedEventFilter<[], {}>;

        PoolMatured(): TypedEventFilter<[], {}>;

        PoolSorted(): TypedEventFilter<[], {}>;

        Stake(
            user: string | null,
            amount: null,
            pricePrediction1: null,
            pricePrediction2: null,
        ): TypedEventFilter<
            [string, BigNumber, BigNumber, BigNumber],
            {
                user: string;
                amount: BigNumber;
                pricePrediction1: BigNumber;
                pricePrediction2: BigNumber;
            }
        >;

        Unstake(
            user: string | null,
            amount: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; amount: BigNumber }>;

        WithdrawIDOToken(
            user: string | null,
            idoTokenAmount: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; idoTokenAmount: BigNumber }>;

        WithdrawPrize(
            user: string | null,
            prize: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; prize: BigNumber }>;

        WithdrawReturn(
            user: string | null,
            stakingReturn: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; stakingReturn: BigNumber }>;
    };

    estimateGas: {
        _getStakingReturn(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        "_getStakingReturn(address)"(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        _getTotalReward(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        "_getTotalReward(address)"(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        claimWithStakingReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "claimWithStakingReward()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        declareEmergency(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "declareEmergency()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        deletePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "deletePool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        dexDecimal(overrides?: CallOverrides): Promise<BigNumber>;

        "dexDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

        emergentWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "emergentWithdraw()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        endIDOPrediction(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "endIDOPrediction()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        getStakers(overrides?: CallOverrides): Promise<BigNumber>;

        "getStakers()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoAllocationFee(overrides?: CallOverrides): Promise<BigNumber>;

        "idoAllocationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoLockPeriods(overrides?: CallOverrides): Promise<BigNumber>;

        "idoLockPeriods()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoRecipients(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        "idoRecipients(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        idoReleasePeriods(overrides?: CallOverrides): Promise<BigNumber>;

        "idoReleasePeriods()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoScheduleStartDate(overrides?: CallOverrides): Promise<BigNumber>;

        "idoScheduleStartDate()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoScheduledTotalAmount(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

        "idoScheduledTotalAmount(address)"(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

        idoToken(overrides?: CallOverrides): Promise<BigNumber>;

        "idoToken()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "idoTokenAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoTokenBank(overrides?: CallOverrides): Promise<BigNumber>;

        "idoTokenBank()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoWithdrawInterval(overrides?: CallOverrides): Promise<BigNumber>;

        "idoWithdrawInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

        idoWithdrawable(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

        "idoWithdrawable(address)"(winner: string, overrides?: CallOverrides): Promise<BigNumber>;

        isAnEmergency(overrides?: CallOverrides): Promise<BigNumber>;

        "isAnEmergency()"(overrides?: CallOverrides): Promise<BigNumber>;

        isDeleted(overrides?: CallOverrides): Promise<BigNumber>;

        "isDeleted()"(overrides?: CallOverrides): Promise<BigNumber>;

        isIdoScheduleSettled(overrides?: CallOverrides): Promise<BigNumber>;

        "isIdoScheduleSettled()"(overrides?: CallOverrides): Promise<BigNumber>;

        isLocked(overrides?: CallOverrides): Promise<BigNumber>;

        "isLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

        isMatured(overrides?: CallOverrides): Promise<BigNumber>;

        "isMatured()"(overrides?: CallOverrides): Promise<BigNumber>;

        lockPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "lockPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        lockTime(overrides?: CallOverrides): Promise<BigNumber>;

        "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

        maturingPrice(overrides?: CallOverrides): Promise<BigNumber>;

        "maturingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

        maturityTime(overrides?: CallOverrides): Promise<BigNumber>;

        "maturityTime()"(overrides?: CallOverrides): Promise<BigNumber>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

        poolCreator(overrides?: CallOverrides): Promise<BigNumber>;

        "poolCreator()"(overrides?: CallOverrides): Promise<BigNumber>;

        predictions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        "predictions(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        prizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "prizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        purchaseIDOToken(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "purchaseIDOToken()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        purchasePrice(overrides?: CallOverrides): Promise<BigNumber>;

        "purchasePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "renounceOwnership()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

        "rewardManager()"(overrides?: CallOverrides): Promise<BigNumber>;

        setIDODexDecimal(
            _dexDecimal: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setIDODexDecimal(uint256)"(
            _dexDecimal: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setIDOMaturityPrice(
            _maturingPrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setIDOMaturityPrice(uint256)"(
            _maturingPrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setIDOPurchasePrice(
            _purchasePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setIDOPurchasePrice(uint256)"(
            _purchasePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setIDOScheduleParameters(
            _idoScheduleStartDate: BigNumberish,
            _idoWithdrawInterval: BigNumberish,
            _idoReleasePeriods: BigNumberish,
            _idoLockPeriods: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setIDOScheduleParameters(uint256,uint256,uint256,uint256)"(
            _idoScheduleStartDate: BigNumberish,
            _idoWithdrawInterval: BigNumberish,
            _idoReleasePeriods: BigNumberish,
            _idoLockPeriods: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setWinnerStakers(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            _idoTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setWinnerStakers(address[25],uint256)"(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            _idoTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        sizeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

        "sizeAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

        sizeLimitRangeRate(overrides?: CallOverrides): Promise<BigNumber>;

        "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        sparksToken(overrides?: CallOverrides): Promise<BigNumber>;

        "sparksToken()"(overrides?: CallOverrides): Promise<BigNumber>;

        stake(
            _amount: BigNumberish,
            _pricePrediction1: BigNumberish,
            _pricePrediction2: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "stake(uint256,uint256,uint256)"(
            _amount: BigNumberish,
            _pricePrediction1: BigNumberish,
            _pricePrediction2: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        stakeApr(overrides?: CallOverrides): Promise<BigNumber>;

        "stakeApr()"(overrides?: CallOverrides): Promise<BigNumber>;

        stakeTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

        "stakeTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "stakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        startDate(overrides?: CallOverrides): Promise<BigNumber>;

        "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

        totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

        "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        usdPriceForIDO(_idoAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "usdPriceForIDO(uint256)"(_idoAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        usdToken(overrides?: CallOverrides): Promise<BigNumber>;

        "usdToken()"(overrides?: CallOverrides): Promise<BigNumber>;

        winnerStakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "winnerStakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        withdrawStuckTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "withdrawStuckTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        _getStakingReturn(staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "_getStakingReturn(address)"(staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        _getTotalReward(staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "_getTotalReward(address)"(staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        claimWithStakingReward(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "claimWithStakingReward()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        declareEmergency(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "declareEmergency()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        deletePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "deletePool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        dexDecimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "dexDecimal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        emergentWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "emergentWithdraw()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        endIDOPrediction(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "endIDOPrediction()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        getStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getStakers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoAllocationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoAllocationFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoLockPeriods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoLockPeriods()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoRecipients(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoRecipients(address)"(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoReleasePeriods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoReleasePeriods()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoScheduleStartDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoScheduleStartDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoScheduledTotalAmount(winner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoScheduledTotalAmount(address)"(winner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoTokenAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoTokenAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoTokenBank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoTokenBank()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoWithdrawInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoWithdrawInterval()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idoWithdrawable(winner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoWithdrawable(address)"(winner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isAnEmergency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isAnEmergency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isDeleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isDeleted()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isIdoScheduleSettled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isIdoScheduleSettled()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isLocked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isMatured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isMatured()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        lockPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "lockPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        lockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "lockTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maturingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "maturingPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maturityTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "maturityTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        poolCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "poolCreator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        predictions(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "predictions(address)"(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        prizeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "prizeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        purchaseIDOToken(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "purchaseIDOToken()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        purchasePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "purchasePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "renounceOwnership()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "rewardManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        setIDODexDecimal(
            _dexDecimal: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setIDODexDecimal(uint256)"(
            _dexDecimal: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setIDOMaturityPrice(
            _maturingPrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setIDOMaturityPrice(uint256)"(
            _maturingPrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setIDOPurchasePrice(
            _purchasePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setIDOPurchasePrice(uint256)"(
            _purchasePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setIDOScheduleParameters(
            _idoScheduleStartDate: BigNumberish,
            _idoWithdrawInterval: BigNumberish,
            _idoReleasePeriods: BigNumberish,
            _idoLockPeriods: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setIDOScheduleParameters(uint256,uint256,uint256,uint256)"(
            _idoScheduleStartDate: BigNumberish,
            _idoWithdrawInterval: BigNumberish,
            _idoReleasePeriods: BigNumberish,
            _idoLockPeriods: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setWinnerStakers(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            _idoTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setWinnerStakers(address[25],uint256)"(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            _idoTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        sizeAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "sizeAllocation()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        sizeLimitRangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        sparksToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "sparksToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        stake(
            _amount: BigNumberish,
            _pricePrediction1: BigNumberish,
            _pricePrediction2: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "stake(uint256,uint256,uint256)"(
            _amount: BigNumberish,
            _pricePrediction1: BigNumberish,
            _pricePrediction2: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        stakeApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "stakeApr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        stakeTaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "stakeTaxRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "stakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "startDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "totalStaked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        usdPriceForIDO(_idoAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "usdPriceForIDO(uint256)"(_idoAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        usdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "usdToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        winnerStakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "winnerStakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        withdrawStuckTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "withdrawStuckTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
