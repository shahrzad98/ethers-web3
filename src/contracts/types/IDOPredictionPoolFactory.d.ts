/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    Contract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IDOPredictionPoolFactoryInterface extends ethers.utils.Interface {
    functions: {
        "addPoolCreator(address)": FunctionFragment;
        "create(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
        "idoTokenBank()": FunctionFragment;
        "isPoolCreator(address)": FunctionFragment;
        "minimumStakeAmount()": FunctionFragment;
        "renouncePoolCreator()": FunctionFragment;
        "rewardManager()": FunctionFragment;
        "setDefaultTaxRate(uint256)": FunctionFragment;
        "setMinimuntToStake(uint256)": FunctionFragment;
        "sparksToken()": FunctionFragment;
        "stakingPoolTaxRate()": FunctionFragment;
        "usdTokenAddress()": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "addPoolCreator", values: [string]): string;
    encodeFunctionData(
        functionFragment: "create",
        values: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            string,
        ],
    ): string;
    encodeFunctionData(functionFragment: "idoTokenBank", values?: undefined): string;
    encodeFunctionData(functionFragment: "isPoolCreator", values: [string]): string;
    encodeFunctionData(functionFragment: "minimumStakeAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "renouncePoolCreator", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultTaxRate", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setMinimuntToStake", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "sparksToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "stakingPoolTaxRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "usdTokenAddress", values?: undefined): string;

    decodeFunctionResult(functionFragment: "addPoolCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idoTokenBank", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPoolCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumStakeAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renouncePoolCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultTaxRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinimuntToStake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sparksToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakingPoolTaxRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usdTokenAddress", data: BytesLike): Result;

    events: {
        "PoolCreated(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
        "PoolCreatorAdded(address)": EventFragment;
        "PoolCreatorRemoved(address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolCreatorAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolCreatorRemoved"): EventFragment;
}

export class IDOPredictionPoolFactory extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: IDOPredictionPoolFactoryInterface;

    functions: {
        addPoolCreator(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "addPoolCreator(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        create(
            maturityTime: BigNumberish,
            lockTime: BigNumberish,
            sizeAllocation: BigNumberish,
            stakeApr: BigNumberish,
            prizeAmount: BigNumberish,
            idoAllocationFee: BigNumberish,
            burnRate: BigNumberish,
            idoPurchasePrice: BigNumberish,
            idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "create(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
            maturityTime: BigNumberish,
            lockTime: BigNumberish,
            sizeAllocation: BigNumberish,
            stakeApr: BigNumberish,
            prizeAmount: BigNumberish,
            idoAllocationFee: BigNumberish,
            burnRate: BigNumberish,
            idoPurchasePrice: BigNumberish,
            idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        idoTokenBank(overrides?: CallOverrides): Promise<[string]>;

        "idoTokenBank()"(overrides?: CallOverrides): Promise<[string]>;

        isPoolCreator(account: string, overrides?: CallOverrides): Promise<[boolean]>;

        "isPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<[boolean]>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        renouncePoolCreator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "renouncePoolCreator()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        rewardManager(overrides?: CallOverrides): Promise<[string]>;

        "rewardManager()"(overrides?: CallOverrides): Promise<[string]>;

        setDefaultTaxRate(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setDefaultTaxRate(uint256)"(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setMinimuntToStake(
            newMinimumStakeAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setMinimuntToStake(uint256)"(
            newMinimumStakeAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        sparksToken(overrides?: CallOverrides): Promise<[string]>;

        "sparksToken()"(overrides?: CallOverrides): Promise<[string]>;

        stakingPoolTaxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        usdTokenAddress(overrides?: CallOverrides): Promise<[string]>;

        "usdTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;
    };

    addPoolCreator(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "addPoolCreator(address)"(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    create(
        maturityTime: BigNumberish,
        lockTime: BigNumberish,
        sizeAllocation: BigNumberish,
        stakeApr: BigNumberish,
        prizeAmount: BigNumberish,
        idoAllocationFee: BigNumberish,
        burnRate: BigNumberish,
        idoPurchasePrice: BigNumberish,
        idoToken: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "create(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
        maturityTime: BigNumberish,
        lockTime: BigNumberish,
        sizeAllocation: BigNumberish,
        stakeApr: BigNumberish,
        prizeAmount: BigNumberish,
        idoAllocationFee: BigNumberish,
        burnRate: BigNumberish,
        idoPurchasePrice: BigNumberish,
        idoToken: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    idoTokenBank(overrides?: CallOverrides): Promise<string>;

    "idoTokenBank()"(overrides?: CallOverrides): Promise<string>;

    isPoolCreator(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<boolean>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    renouncePoolCreator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "renouncePoolCreator()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    "rewardManager()"(overrides?: CallOverrides): Promise<string>;

    setDefaultTaxRate(
        newStakingPoolTaxRate: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setDefaultTaxRate(uint256)"(
        newStakingPoolTaxRate: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMinimuntToStake(
        newMinimumStakeAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setMinimuntToStake(uint256)"(
        newMinimumStakeAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sparksToken(overrides?: CallOverrides): Promise<string>;

    "sparksToken()"(overrides?: CallOverrides): Promise<string>;

    stakingPoolTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    usdTokenAddress(overrides?: CallOverrides): Promise<string>;

    "usdTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    callStatic: {
        addPoolCreator(account: string, overrides?: CallOverrides): Promise<void>;

        "addPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<void>;

        create(
            maturityTime: BigNumberish,
            lockTime: BigNumberish,
            sizeAllocation: BigNumberish,
            stakeApr: BigNumberish,
            prizeAmount: BigNumberish,
            idoAllocationFee: BigNumberish,
            burnRate: BigNumberish,
            idoPurchasePrice: BigNumberish,
            idoToken: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        "create(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
            maturityTime: BigNumberish,
            lockTime: BigNumberish,
            sizeAllocation: BigNumberish,
            stakeApr: BigNumberish,
            prizeAmount: BigNumberish,
            idoAllocationFee: BigNumberish,
            burnRate: BigNumberish,
            idoPurchasePrice: BigNumberish,
            idoToken: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        idoTokenBank(overrides?: CallOverrides): Promise<string>;

        "idoTokenBank()"(overrides?: CallOverrides): Promise<string>;

        isPoolCreator(account: string, overrides?: CallOverrides): Promise<boolean>;

        "isPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<boolean>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        renouncePoolCreator(overrides?: CallOverrides): Promise<void>;

        "renouncePoolCreator()"(overrides?: CallOverrides): Promise<void>;

        rewardManager(overrides?: CallOverrides): Promise<string>;

        "rewardManager()"(overrides?: CallOverrides): Promise<string>;

        setDefaultTaxRate(newStakingPoolTaxRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "setDefaultTaxRate(uint256)"(newStakingPoolTaxRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setMinimuntToStake(newMinimumStakeAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "setMinimuntToStake(uint256)"(newMinimumStakeAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

        sparksToken(overrides?: CallOverrides): Promise<string>;

        "sparksToken()"(overrides?: CallOverrides): Promise<string>;

        stakingPoolTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

        "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        usdTokenAddress(overrides?: CallOverrides): Promise<string>;

        "usdTokenAddress()"(overrides?: CallOverrides): Promise<string>;
    };

    filters: {
        PoolCreated(
            pool: string | null,
            idoTokenContract: null,
            maturityTime: null,
            lockTime: null,
            sizeAllocation: null,
            stakeApr: null,
            prizeAmount: null,
            idoAllocationFee: null,
            stakingPoolTaxRate: null,
            minimumStakeAmount: null,
            idoPurchasePrice: null,
        ): TypedEventFilter<
            [
                string,
                string,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
            ],
            {
                pool: string;
                idoTokenContract: string;
                maturityTime: BigNumber;
                lockTime: BigNumber;
                sizeAllocation: BigNumber;
                stakeApr: BigNumber;
                prizeAmount: BigNumber;
                idoAllocationFee: BigNumber;
                stakingPoolTaxRate: BigNumber;
                minimumStakeAmount: BigNumber;
                idoPurchasePrice: BigNumber;
            }
        >;

        PoolCreatorAdded(account: string | null): TypedEventFilter<[string], { account: string }>;

        PoolCreatorRemoved(account: string | null): TypedEventFilter<[string], { account: string }>;
    };

    estimateGas: {
        addPoolCreator(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "addPoolCreator(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        create(
            maturityTime: BigNumberish,
            lockTime: BigNumberish,
            sizeAllocation: BigNumberish,
            stakeApr: BigNumberish,
            prizeAmount: BigNumberish,
            idoAllocationFee: BigNumberish,
            burnRate: BigNumberish,
            idoPurchasePrice: BigNumberish,
            idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "create(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
            maturityTime: BigNumberish,
            lockTime: BigNumberish,
            sizeAllocation: BigNumberish,
            stakeApr: BigNumberish,
            prizeAmount: BigNumberish,
            idoAllocationFee: BigNumberish,
            burnRate: BigNumberish,
            idoPurchasePrice: BigNumberish,
            idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        idoTokenBank(overrides?: CallOverrides): Promise<BigNumber>;

        "idoTokenBank()"(overrides?: CallOverrides): Promise<BigNumber>;

        isPoolCreator(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        "isPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        renouncePoolCreator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "renouncePoolCreator()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

        "rewardManager()"(overrides?: CallOverrides): Promise<BigNumber>;

        setDefaultTaxRate(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setDefaultTaxRate(uint256)"(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setMinimuntToStake(
            newMinimumStakeAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setMinimuntToStake(uint256)"(
            newMinimumStakeAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        sparksToken(overrides?: CallOverrides): Promise<BigNumber>;

        "sparksToken()"(overrides?: CallOverrides): Promise<BigNumber>;

        stakingPoolTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

        "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        usdTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

        "usdTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        addPoolCreator(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "addPoolCreator(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        create(
            maturityTime: BigNumberish,
            lockTime: BigNumberish,
            sizeAllocation: BigNumberish,
            stakeApr: BigNumberish,
            prizeAmount: BigNumberish,
            idoAllocationFee: BigNumberish,
            burnRate: BigNumberish,
            idoPurchasePrice: BigNumberish,
            idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "create(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
            maturityTime: BigNumberish,
            lockTime: BigNumberish,
            sizeAllocation: BigNumberish,
            stakeApr: BigNumberish,
            prizeAmount: BigNumberish,
            idoAllocationFee: BigNumberish,
            burnRate: BigNumberish,
            idoPurchasePrice: BigNumberish,
            idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        idoTokenBank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idoTokenBank()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isPoolCreator(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renouncePoolCreator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "renouncePoolCreator()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "rewardManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        setDefaultTaxRate(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setDefaultTaxRate(uint256)"(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setMinimuntToStake(
            newMinimumStakeAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setMinimuntToStake(uint256)"(
            newMinimumStakeAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        sparksToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "sparksToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        stakingPoolTaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        usdTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "usdTokenAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
