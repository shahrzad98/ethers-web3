/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    Contract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IDOTokenBankInterface extends ethers.utils.Interface {
    functions: {
        "addIDOPredictionWithToken(address,address)": FunctionFragment;
        "addOperator(address)": FunctionFragment;
        "addRewarder(address)": FunctionFragment;
        "getIDOTokenBalance(address)": FunctionFragment;
        "getUSDBalance()": FunctionFragment;
        "getUSDToken()": FunctionFragment;
        "idos(uint256)": FunctionFragment;
        "isOperator(address)": FunctionFragment;
        "isRewarder(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "poolToIDOTokens(address)": FunctionFragment;
        "removeOperator(address)": FunctionFragment;
        "renounceOperator()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "renounceRewarder()": FunctionFragment;
        "setOperator(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "transferUserIDOToken(address,address,uint256)": FunctionFragment;
        "withdrawTokens(address,uint256,address)": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "addIDOPredictionWithToken", values: [string, string]): string;
    encodeFunctionData(functionFragment: "addOperator", values: [string]): string;
    encodeFunctionData(functionFragment: "addRewarder", values: [string]): string;
    encodeFunctionData(functionFragment: "getIDOTokenBalance", values: [string]): string;
    encodeFunctionData(functionFragment: "getUSDBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "getUSDToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "idos", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isOperator", values: [string]): string;
    encodeFunctionData(functionFragment: "isRewarder", values: [string]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "poolToIDOTokens", values: [string]): string;
    encodeFunctionData(functionFragment: "removeOperator", values: [string]): string;
    encodeFunctionData(functionFragment: "renounceOperator", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRewarder", values?: undefined): string;
    encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "transferUserIDOToken", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawTokens", values: [string, BigNumberish, string]): string;

    decodeFunctionResult(functionFragment: "addIDOPredictionWithToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addRewarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getIDOTokenBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUSDBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUSDToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "idos", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRewarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "poolToIDOTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRewarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferUserIDOToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawTokens", data: BytesLike): Result;

    events: {
        "ApproveTokens(address,uint256)": EventFragment;
        "OperatorAdded(address)": EventFragment;
        "OperatorRemoved(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "ReceivedTokens(address,uint256)": EventFragment;
        "RemoveOperator(address)": EventFragment;
        "RewarderAdded(address)": EventFragment;
        "RewarderRemoved(address)": EventFragment;
        "SetOperator(address)": EventFragment;
        "SetRewarderOfIDO(address,address)": EventFragment;
        "TransferTokens(address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "ApproveTokens"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OperatorAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OperatorRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceivedTokens"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoveOperator"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewarderAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewarderRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetOperator"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetRewarderOfIDO"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TransferTokens"): EventFragment;
}

export class IDOTokenBank extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: IDOTokenBankInterface;

    functions: {
        addIDOPredictionWithToken(
            _poolAddress: string,
            _idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "addIDOPredictionWithToken(address,address)"(
            _poolAddress: string,
            _idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        addOperator(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "addOperator(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        addRewarder(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "addRewarder(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        getIDOTokenBalance(_idoToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        "getIDOTokenBalance(address)"(_idoToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        getUSDBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

        "getUSDBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        getUSDToken(overrides?: CallOverrides): Promise<[string]>;

        "getUSDToken()"(overrides?: CallOverrides): Promise<[string]>;

        idos(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

        "idos(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

        isOperator(account: string, overrides?: CallOverrides): Promise<[boolean]>;

        "isOperator(address)"(account: string, overrides?: CallOverrides): Promise<[boolean]>;

        isRewarder(account: string, overrides?: CallOverrides): Promise<[boolean]>;

        "isRewarder(address)"(account: string, overrides?: CallOverrides): Promise<[boolean]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        "owner()"(overrides?: CallOverrides): Promise<[string]>;

        poolToIDOTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

        "poolToIDOTokens(address)"(arg0: string, overrides?: CallOverrides): Promise<[string]>;

        removeOperator(
            _operator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "removeOperator(address)"(
            _operator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        renounceOperator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "renounceOperator()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "renounceOwnership()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        renounceRewarder(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "renounceRewarder()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        setOperator(
            _newOperator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setOperator(address)"(
            _newOperator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        transferUserIDOToken(
            _idoToken: string,
            _user: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "transferUserIDOToken(address,address,uint256)"(
            _idoToken: string,
            _user: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        withdrawTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "withdrawTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    addIDOPredictionWithToken(
        _poolAddress: string,
        _idoToken: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "addIDOPredictionWithToken(address,address)"(
        _poolAddress: string,
        _idoToken: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addOperator(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "addOperator(address)"(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addRewarder(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "addRewarder(address)"(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getIDOTokenBalance(_idoToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getIDOTokenBalance(address)"(_idoToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDToken(overrides?: CallOverrides): Promise<string>;

    "getUSDToken()"(overrides?: CallOverrides): Promise<string>;

    idos(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "idos(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isOperator(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isOperator(address)"(account: string, overrides?: CallOverrides): Promise<boolean>;

    isRewarder(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isRewarder(address)"(account: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolToIDOTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    "poolToIDOTokens(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

    removeOperator(
        _operator: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "removeOperator(address)"(
        _operator: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOperator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "renounceOperator()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renounceRewarder(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "renounceRewarder()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setOperator(
        _newOperator: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setOperator(address)"(
        _newOperator: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferUserIDOToken(
        _idoToken: string,
        _user: string,
        _amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "transferUserIDOToken(address,address,uint256)"(
        _idoToken: string,
        _user: string,
        _amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawTokens(
        _stuckToken: string,
        amount: BigNumberish,
        receiver: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "withdrawTokens(address,uint256,address)"(
        _stuckToken: string,
        amount: BigNumberish,
        receiver: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        addIDOPredictionWithToken(_poolAddress: string, _idoToken: string, overrides?: CallOverrides): Promise<void>;

        "addIDOPredictionWithToken(address,address)"(
            _poolAddress: string,
            _idoToken: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        addOperator(account: string, overrides?: CallOverrides): Promise<void>;

        "addOperator(address)"(account: string, overrides?: CallOverrides): Promise<void>;

        addRewarder(account: string, overrides?: CallOverrides): Promise<void>;

        "addRewarder(address)"(account: string, overrides?: CallOverrides): Promise<void>;

        getIDOTokenBalance(_idoToken: string, overrides?: CallOverrides): Promise<BigNumber>;

        "getIDOTokenBalance(address)"(_idoToken: string, overrides?: CallOverrides): Promise<BigNumber>;

        getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

        "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

        getUSDToken(overrides?: CallOverrides): Promise<string>;

        "getUSDToken()"(overrides?: CallOverrides): Promise<string>;

        idos(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

        "idos(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

        isOperator(account: string, overrides?: CallOverrides): Promise<boolean>;

        "isOperator(address)"(account: string, overrides?: CallOverrides): Promise<boolean>;

        isRewarder(account: string, overrides?: CallOverrides): Promise<boolean>;

        "isRewarder(address)"(account: string, overrides?: CallOverrides): Promise<boolean>;

        owner(overrides?: CallOverrides): Promise<string>;

        "owner()"(overrides?: CallOverrides): Promise<string>;

        poolToIDOTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

        "poolToIDOTokens(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

        removeOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

        "removeOperator(address)"(_operator: string, overrides?: CallOverrides): Promise<void>;

        renounceOperator(overrides?: CallOverrides): Promise<void>;

        "renounceOperator()"(overrides?: CallOverrides): Promise<void>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

        renounceRewarder(overrides?: CallOverrides): Promise<void>;

        "renounceRewarder()"(overrides?: CallOverrides): Promise<void>;

        setOperator(_newOperator: string, overrides?: CallOverrides): Promise<void>;

        "setOperator(address)"(_newOperator: string, overrides?: CallOverrides): Promise<void>;

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

        "transferOwnership(address)"(newOwner: string, overrides?: CallOverrides): Promise<void>;

        transferUserIDOToken(
            _idoToken: string,
            _user: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        "transferUserIDOToken(address,address,uint256)"(
            _idoToken: string,
            _user: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        withdrawTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        "withdrawTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: CallOverrides,
        ): Promise<void>;
    };

    filters: {
        ApproveTokens(
            to: string | null,
            amount: null,
        ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

        OperatorAdded(account: string | null): TypedEventFilter<[string], { account: string }>;

        OperatorRemoved(account: string | null): TypedEventFilter<[string], { account: string }>;

        OwnershipTransferred(
            previousOwner: string | null,
            newOwner: string | null,
        ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

        ReceivedTokens(
            from: string | null,
            amount: null,
        ): TypedEventFilter<[string, BigNumber], { from: string; amount: BigNumber }>;

        RemoveOperator(operator: null): TypedEventFilter<[string], { operator: string }>;

        RewarderAdded(account: string | null): TypedEventFilter<[string], { account: string }>;

        RewarderRemoved(account: string | null): TypedEventFilter<[string], { account: string }>;

        SetOperator(operator: null): TypedEventFilter<[string], { operator: string }>;

        SetRewarderOfIDO(
            rewarder: null,
            token: null,
        ): TypedEventFilter<[string, string], { rewarder: string; token: string }>;

        TransferTokens(
            to: string | null,
            amount: null,
        ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;
    };

    estimateGas: {
        addIDOPredictionWithToken(
            _poolAddress: string,
            _idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "addIDOPredictionWithToken(address,address)"(
            _poolAddress: string,
            _idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        addOperator(account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "addOperator(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        addRewarder(account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "addRewarder(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        getIDOTokenBalance(_idoToken: string, overrides?: CallOverrides): Promise<BigNumber>;

        "getIDOTokenBalance(address)"(_idoToken: string, overrides?: CallOverrides): Promise<BigNumber>;

        getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

        "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

        getUSDToken(overrides?: CallOverrides): Promise<BigNumber>;

        "getUSDToken()"(overrides?: CallOverrides): Promise<BigNumber>;

        idos(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "idos(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        isOperator(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        "isOperator(address)"(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        isRewarder(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        "isRewarder(address)"(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

        poolToIDOTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        "poolToIDOTokens(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        removeOperator(
            _operator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "removeOperator(address)"(
            _operator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        renounceOperator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "renounceOperator()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "renounceOwnership()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        renounceRewarder(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "renounceRewarder()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        setOperator(
            _newOperator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setOperator(address)"(
            _newOperator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        transferUserIDOToken(
            _idoToken: string,
            _user: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "transferUserIDOToken(address,address,uint256)"(
            _idoToken: string,
            _user: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        withdrawTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "withdrawTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        addIDOPredictionWithToken(
            _poolAddress: string,
            _idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "addIDOPredictionWithToken(address,address)"(
            _poolAddress: string,
            _idoToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        addOperator(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "addOperator(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        addRewarder(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "addRewarder(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        getIDOTokenBalance(_idoToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getIDOTokenBalance(address)"(_idoToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getUSDBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getUSDBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getUSDToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getUSDToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        idos(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "idos(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isOperator(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isOperator(address)"(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isRewarder(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isRewarder(address)"(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        poolToIDOTokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "poolToIDOTokens(address)"(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        removeOperator(
            _operator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "removeOperator(address)"(
            _operator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        renounceOperator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "renounceOperator()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "renounceOwnership()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        renounceRewarder(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "renounceRewarder()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setOperator(
            _newOperator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setOperator(address)"(
            _newOperator: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        transferUserIDOToken(
            _idoToken: string,
            _user: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "transferUserIDOToken(address,address,uint256)"(
            _idoToken: string,
            _user: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        withdrawTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "withdrawTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
